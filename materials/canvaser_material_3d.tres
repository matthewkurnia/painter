[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[ext_resource path="res://assets/strokes/dry_1.png" type="Texture" id=1]
[ext_resource path="res://assets/2d/leinwand-orange-textur-hintergrund.png" type="Texture" id=2]

[sub_resource type="Shader" id=49]
code = "shader_type spatial;
render_mode async_visible, blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx, unshaded;

uniform sampler2D source;
uniform sampler2D brush_texture;
uniform sampler2D canvas;
uniform sampler2D depth_motion;
uniform float canvas_roughness;

uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform int particles_anim_h_frames;
uniform int particles_anim_v_frames;
uniform bool particles_anim_loop;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

const vec2 sampling_offsets[4] = {
	vec2(-1, 0),
	vec2(1, 0),
	vec2(0, -1),
	vec2(0, 1)
};

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	mat4 mat_world = mat4(normalize(CAMERA_MATRIX[0])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[1])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[2])*length(WORLD_MATRIX[2]),WORLD_MATRIX[3]);
	mat_world = mat_world * mat4( vec4(cos(INSTANCE_CUSTOM.x),-sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0, 1.0));
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat_world;
	float h_frames = float(particles_anim_h_frames);
	float v_frames = float(particles_anim_v_frames);
	float particle_total_frames = float(particles_anim_h_frames * particles_anim_v_frames);
	float particle_frame = floor(INSTANCE_CUSTOM.z * float(particle_total_frames));
	if (!particles_anim_loop) {
		particle_frame = clamp(particle_frame, 0.0, particle_total_frames - 1.0);
	} else {
		particle_frame = mod(particle_frame, particle_total_frames);
	}	UV /= vec2(h_frames, v_frames);
	UV += vec2(mod(particle_frame, h_frames) / h_frames, floor((particle_frame + 0.5) / h_frames) / v_frames);
}

float grainify(float x, float a) {
	x -= 0.5;
	a -= 0.5;
	return max(min(canvas_roughness * (x + a) + 0.5, 1.0), 0.0);
}

void fragment() {
//	generated start
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	albedo_tex *= COLOR;
//	ALBEDO = albedo.rgb * albedo_tex.rgb;
//	ALPHA = albedo.a * albedo_tex.a;
//	generated end
	
	vec2 normalized_position = COLOR.xy;
	float angle = COLOR.z;
	float scale = COLOR.w;
	mat3 rotation;
	rotation[0] = vec3(cos(angle), -sin(angle), 0.0);
	rotation[1] = vec3(sin(angle), cos(angle), 0.0);
	rotation[2] = vec3(0.0, 0.0, 1.0);
	
//	vec2 uv = normalized_position * vec2(1, -1) + vec2(0, 1);
	
	ALBEDO = texture(source, normalized_position).rgb;
//	ALBEDO = vec3(normalized_position, 0.0);
//	ALBEDO = vec3(pow(texture(depth_motion, normalized_position).z, 20.0));
	ALPHA = grainify(
		texture(canvas, SCREEN_UV).x,
		texture(brush_texture, UV).a
	);
	ALPHA = texture(brush_texture, UV).a;
}
"

[sub_resource type="ViewportTexture" id=54]
viewport_path = NodePath("SceneManager/DepthMotion")

[sub_resource type="ViewportTexture" id=50]
viewport_path = NodePath("SceneManager/Base")

[resource]
resource_local_to_scene = true
shader = SubResource( 49 )
shader_param/canvas_roughness = null
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/particles_anim_h_frames = 1
shader_param/particles_anim_v_frames = 1
shader_param/particles_anim_loop = false
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/source = SubResource( 50 )
shader_param/brush_texture = ExtResource( 1 )
shader_param/canvas = ExtResource( 2 )
shader_param/depth_motion = SubResource( 54 )
